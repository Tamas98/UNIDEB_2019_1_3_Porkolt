Rendszerkspecifikáció

1. Mit készítünk?

Egy olyan szoftvert szeretnénk készíteni, aminek segítségével az emberek
könnyedén fejleszthetik nyelvtudásukat. Különböző nyelvek egyszerre történő
tanulását is szeretnénk lehetővé tenni a programban, illetve céljaink
közé tartozik, hogy a programban felhasználónév és jelszó segítségével
elkülönítsük a felhasznlók előrehaladását, így akár ugyan azon számítógépen
egyszerre akár többen is használhatják a programot gond nélkül. Szeretnénk
elkülöníteni benne a szófajokat is, így specifikusabban tudnak a felhasználók
tanulni. A program feladata lesz az is,hogy kikérdezze a felhasználó által
tanult új szavakat, beleszőve a kikérdezés folyamatába a korábban már megtanult
szavakat is, ezzel ismételve, hogy biztosak legyünk benne, hogy nemcsak ideig
óráig tartott a tanuló tudása.

2. Miért készítjük?

Szoftverünkkel azon emberek problémáját kívánjuk megoldani, akiknek nehézkesen
megy a nyelvtanulás, nincs pénzük a drága nyelvkönyvekre vagy magántanárra, ahogyan
már említettük a Követelmény Specifikációban. Bár szoftverünk célja jelen pillanatban
csak a választott nyelven belüli szókincs bővítése, véleményünk szerint az idegen nyelven
történő magabiztos felszólalás alapja egy szilárd szókincs.

3. Hogyan valósítjuk meg?

3.1 A bejelentkezés

	3.1.1 A jelszó titkosítása

	Elsősorban amire szükségünk lesz, az egy User osztály, amiben egy felhasználó
nevét, kódolt jelszavát, illetve a már megtanult szópárokat tároljuk egy map-ben,ahol
a magyar nyelvű szó a kulcs, míg az idegen nyelvű az érték rész. A jelszó  kódolosa
a következőhöz hasonlóan történjen:

	String jelszo  = "jelszo";
	String hash1 = "nisofnipafnspsa$cas2324";
	String hash2 = "nsnbpivan/&@ejof46546fsafvca";

	String kodolt = hash1 + Caesar(jelszo) + hash2;

,ahol a Caesar egy függvényt jelöl, ami Caesar kódolással lekódolja a jelszó részt.
Ennek megfelelően a visszaellenőrzés úgy történjen:

	Char[] pwd = pwdField.getPassword();
	if(user.passwd.equals(hash1 + Caesar(pwd)+hash2))
		//Sikeres bejelentkezés
	else
		//Sikertelen bejelentkezés

	3.1.2 A jelszó visszaállítása

	Amennyiben a felhasználó elfelejtené a jelszavát biztosítanunk kell neki egy
lehetőséget,amivel megváltoztatja.Ennek érdekében a User osztályban tárolni
kell egy jelszó-visszaállító kódot, amit a felhasználótól majd elkérhet a 
program, a helyreállítás érdekében. A jelszó visszanyerésére, használjuk
a Stringek substr() metódusát, valamint írjunk egy Caesar dekódolót. 
A helyesen beütött kód utána jelenjen meg a felhasználónak a jelenlegi 
jelszava, valamint egy kérdés, hogy szeretné-e megváltoztatni ezt. Biztosítsunk
lehetőséget a megváltoztatásra. A program csak sikeres bejelentkezés vagy
a "Használat vendégként" gomb választása után induljon el.


3.2 Az adatok tárolása

	3.2.1 A felhasználó adatai

	Az adatok tárolására .json fájlokat használjunk, melyek írásához, illetve
olvasásához a gson könyvtárat használjuk. Legalább két adatbázisra lesz
szükségünk a projekt megvalósításához. Az egyik adatbázisban a felhasználók
adatait tároljuk, a felhasználónevüket, jelszavukat és a már megtanult szavak
listáját map-ként. 

	[
		{
			"username": felhasznalonev,
			"password": jelszo,
			"recover": helyreallito,
			"angol": {
					'főnév': {
						"magyar1": "angol1",
						"magyar2": "angol2"
						...
						},
					"melleknev": {
						"magyar1": "angol1",
						"magyar2": "angol2"
						...
						}
					},
			"francia": {
				"melleknev": {
					"magyar1": "francia1",
					"magyar2": "francia2"
					...
					},
				'főnév': {
						"magyar1": "francia1",
						"magyar2": "francia2"
						...
					}
				}
		}
	]

	3.2.2 A szótárak tárolása

	A másik fájl a nyelveket és a szópárokat tartalmazza.
Itt választhatjuk azt is, hogy minden nyelvnek külön fájlt hozunk létre.
Amennyiben az egy fájlost megoldást választjuk, úgy kulcs-érték párokként
tároljuk a nyelveket és a szavakat, ahol a kulcs a nyelv, az érték pedig
a szótárunk. 

	[
		{
			"angol": {
					'főnév': {
						"magyar1": "angol1",
						"magyar2": "angol2"
						...
						},
					"melleknev": {
						"magyar1": "angol1",
						"magyar2": "angol2"
						...
						}
					},
			"francia": {
				"melleknev": {
					"magyar1": "francia1",
					"magyar2": "francia2"
					...
					},
				'főnév': {
						"magyar1": "francia1",
						"magyar2": "francia2"
						...
					}
				}
		}
	]

A nyelvek különböző fájlokban való tárolása esetén pedig a felhasználó
választása alapján csak kiválasztjuk melyik json fájlt töltse be a program,
hogy a választott nyelvű szavak szótárát kapjuk.

4. Üzleti folyamatok modellje

	A most fentálló nyelvtanulási módszerünk nem felhasználóbarát. A papíron történő
tanulási folyamatok elavultnak tekinthetőek. Másrészt időigényes, nem végezhető
Bárhol és bármikor. Ezzel szemben az új üzleti folyamatunk segítségével a felhasználó
igényeit a mai kornak megfelelő módszerekkel fogjuk kielégítni. Azzal, hogy digitális
platformra helyezzük a tanulást. Ehhez elég rendelkezni a programunkkal, amit már
bárhol bármikor bárki használhat gyorsan és egyszerűen. Így megfelelő szolgáltatást
tudunk nyújtani mindenki számára, aki nyelvet szeretne tanulni. A program futtatása
után a felhasználó elkészíti a profilját, ha az még nem létezik. Ha igen, akkor bejelentkezik. Ezután kiválasztja azt, hogy épp milyen nyelven szeretne éppen tanulni.
Majd jöhet is a tanulás folyamata, amit a felhasználó egyszerűen, könnyen kezelhetően,
Intuitívan tud kezelni és használni.

5. Követelmények

	Programunkak rendelkezni kell funkcionális, illetve nem funkcionális követelményekkel is. 
Fontos számunkra, hogy a kevésbé profi számítógépes felhasználók is boldogulni tudjanak a rendszerünkkel, ne jelenthessen ez semmiféle hátráltató tényezőt. 
Emiatt az alkalmazásunknak a lehető leginkább egyszerűnek és könnyen kezelhetőnek kell lennie. A kezelőfelütnek egyszerűen átláthatónak, letisztultnak, szépnek kell lennie. 
A felhasználónak legyen lehetősége saját profilt csinálni. Legyen lehetősége bejelentkeznie.
Tudjon tetszés szerint tanulni kívánt nyelvet választani. Fontos szempont, hogy programunk ne foglaljon túlságosan sok tárhelyet. 
Illetve ne legyen nagy rendszerigénye, hogy minél széresebb körben el tudjon terjedni. Ha internetes kapcsolat szükséges, akkor pedig a lehető legkevesebb adatforgalmat generálja. 
A felhasználó részéről feltétel, hogy rendelkezzen ezekhez megfelelő számítógéppel.

6. Architektúrális terv 
	6.1 Rendszer bővíthetősége

	Mivel egy nyelvtanulós programról beszélünk, ezért fontos lehet, hogy több nyelv közül is lehessen
választani a későbbiekben, ami a felhasználó közönséget növeli. A rendszer felépítéséből adódóan
lehetőségünk lehet többféle választást kínálni a felhasználóknak a témák kapcsán, hogy milyen
témakörökben szeretnék erősíteni a tudásukat.

	6.2 Biztonsági funkciók

	A felhasználóknak biztosítunk egy bejelentkezési lehetőséget, jelszóval ellátva
és így mindenki saját maga nyomon tudja követni, a már megtanult szavait.
A jelszó titkosítására úgynevezett "Caesar" kódolási technikát alkalmazunk, kiegészítve
két darab String típusú "hash"-el, ami a megadott jelszó köré kerül, így megnehezítve az
esetleges jelszó feltöréseket.


7. Tesztterv

	Szintén fontos pont a rendzserünk sikeres elkészítésének folyamatában az, hogy megfelelő tesztelést vigyünk véghez. 
Nem szeretnénk, ha a kiadás után súlyos vagy akár kevébé súlyos hibák benne maradnának. Illetve valami nem működne rendesen, 
esetleg egyáltalán vagy nem úgy ahogy mi azt szeretnénk. Emiatt folyamatosan ellenőrizni fogjuk a programunk működését már a fejlesztés elkezdésének első szakaszaiban is. 
Ebben mindenki részt fog venni, illetve a későbbiekben külsős tesztelőket is bevonhatunk majd a teljes siker érdekében. 
Mindennek tökéletesen kell működnie ahhoz, hogy  a teszt sikeres legyen. Kezdve azzal, hogy a felhasználási felületek rendesen betöltődnek-e, a menü elemek, a gombok, 
a felületek amikkel interakcióba lépnek a felhasználók mind mind működnek, méghozzá pontosan úgy ahogy azt mi elvárjuk. 
A bejelentkezés folyamatának mindenképp működőképesnek és gördülékenynek kell lennie. Pont úgy, mint ahogyan a nyelv kiválasztásának és azt követő teljes tanulási folyamatnak. 
A program legyen megfelelőképp gyors, hogy a felhasználónak öröm legyen használnia.

8. Karbantartás

	Természetesen programunkat elkészülte után nem szeretnénk bejefezettnek tekinteni. A sikeres teszt elvégzésétől függetlenül, 
ha bármilyen hiba előjön, azt javítani szeretnénk minél hamarabb, nem cserben hagyva felhasználóinkat. Emelett szeretnénk a későbbiekben tovább fejleszteni szoftverünket, 
folyamatosan új funkciókat hozzáadva. Ennek érdekében szeretnénk kontaktot tartani a felhasználóinkkal, hallgatni az észrevételeikre. 
Illetve, ha bármilyen probléma merül fel részükről, annak megoldásában a segítségükre lenni. Ezáltal a jövőben várhatóak frissítések, 
amiket szintén tesztelni fogunk, ahogy az a teszttervek alcím alatt megtalálható. Szeretnénk, ha ez a projekt egy minél szélesebb palettát fedne le a jövőben
a nyelvtanulás témakörön belül. Amivel akár az adott nyelv teljes elsajátítása lehetséges.

